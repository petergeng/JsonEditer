/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.petergeng.ui;

import java.util.Enumeration;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

import com.petergeng.data.DataType;
import com.petergeng.logic.JsonPraser;
import com.petergeng.util.Util;

/**
 * 
 * @author petergeng
 */
public class JsonEditerUI extends javax.swing.JFrame {

	/**
	 * Creates new form JsonEditerUI
	 */
	public JsonEditerUI() {
		initComponents();
	}

	private JTree initJTree(JTree tree) {
		Object[] hierarchy = { new DataType("root") };
		DefaultMutableTreeNode root = processHierarchy(hierarchy);
		tree = new JTree(root);
		return tree;
	}

	private DefaultMutableTreeNode processHierarchy(Object[] hierarchy) {
		DefaultMutableTreeNode node = new DefaultMutableTreeNode(hierarchy[0]);
		DefaultMutableTreeNode child;
		for (int i = 1; i < hierarchy.length; i++) {
			Object nodeSpecifier = hierarchy[i];
			if (nodeSpecifier instanceof Object[]) // Ie node with children
				child = processHierarchy((Object[]) nodeSpecifier);
			else
				child = new DefaultMutableTreeNode(nodeSpecifier); // Ie Leaf
			node.add(child);
		}
		return (node);
	}
	
	private DefaultMutableTreeNode getJTreeRoot(){
		return (DefaultMutableTreeNode) jTree1.getModel().getRoot();
	}
	
	private void buildTreeByData(DataType dataType) {
		TreeModel treeModel = jTree1.getModel();
		DefaultMutableTreeNode root = (DefaultMutableTreeNode)this.getJTreeRoot();
		root.removeAllChildren();
		((DefaultTreeModel) treeModel).reload();
		for(DataType node : dataType.getDatas()){
			processByDataType(node,root,treeModel);
		}
		jTree1.setModel(treeModel);
		jTree1.repaint();
	
	}
	
	private void processByDataType(DataType d, TreeNode parent, TreeModel treeModel){
		DefaultMutableTreeNode node = new DefaultMutableTreeNode(d);
		((DefaultTreeModel) treeModel).insertNodeInto(node,(MutableTreeNode) parent,parent.getChildCount());
		for(DataType ds : d.getDatas()){
			processByDataType(ds,node,treeModel);
		}
	}

	public static Set<DataType> visitAllNodes(JTree tree) {
		Set<DataType> treeNodeSet = new HashSet<DataType>();
		DefaultMutableTreeNode root = (DefaultMutableTreeNode) tree.getModel().getRoot();
		root.setUserObject(new DataType("root"));
		visitAllNodes(tree, root,treeNodeSet);
		return treeNodeSet;
	}

	public static void visitAllNodes(JTree tree, TreeNode node,Set<DataType> treeNodeSet) {
		// node is visited exactly once
		// you can do your things about this node,such as:
		tree.makeVisible(new TreePath(((DefaultTreeModel) tree.getModel())
				.getPathToRoot(node)));
		
		if (node.getChildCount() >= 0) {
			for (Enumeration e = node.children(); e.hasMoreElements();) {
				TreeNode n = (TreeNode) e.nextElement();
				visitAllNodes(tree, n,treeNodeSet);
				treeToData(n,treeNodeSet);
			}
		}		
	}
	
	private static void printNode(Map<DataType,List<DataType>> treeNodeMap){
		for(DataType n : treeNodeMap.keySet()){
			List<DataType> l = treeNodeMap.get(n);
			System.out.println("Parent: " + n.toString());
			for(DataType nn : l){
				System.out.print("| child : " + nn.toString() + "|");
			}
			System.out.println();
		}
	}
	
	public static void treeToData(TreeNode node,Set<DataType> treeNodeSet) {
		DefaultMutableTreeNode parent = (DefaultMutableTreeNode)node.getParent();
		DataType parentData = (DataType)parent.getUserObject();
		DataType currentData = (DataType) ((DefaultMutableTreeNode)node).getUserObject();
		parentData.getDatas().add(currentData);
		if(!treeNodeSet.contains(parentData)){
			treeNodeSet.add(parentData);
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jPopupMenu1 = new javax.swing.JPopupMenu();
		jMenuItem2 = new javax.swing.JMenuItem();
		jMenuItem3 = new javax.swing.JMenuItem();
		jMenuItem4 = new javax.swing.JMenuItem();
		jMenuItem5 = new javax.swing.JMenuItem();
		jScrollPane1 = new javax.swing.JScrollPane();
		jTextArea1 = new javax.swing.JTextArea();
		jScrollPane2 = new javax.swing.JScrollPane();
		jTree1 = initJTree(jTree1);
		jScrollPane3 = new javax.swing.JScrollPane();
		jTable1 = new javax.swing.JTable();
		jMenuBar1 = new javax.swing.JMenuBar();
		jMenu1 = new javax.swing.JMenu();
		jMenuItem1 = new javax.swing.JMenuItem();
		jMenu2 = new javax.swing.JMenu();

		jMenuItem2.setText("新增子节点");
		jMenuItem2.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				jMenuItem2MouseClicked(evt);
			}

			public void mouseReleased(java.awt.event.MouseEvent evt) {
				jMenuItem2MouseReleased(evt);
			}
		});
		jPopupMenu1.add(jMenuItem2);

		jMenuItem3.setText("编辑当前节点");
		jMenuItem3.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mousePressed(java.awt.event.MouseEvent evt) {
				jMenuItem3MousePressed(evt);
			}
		});
		jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jMenuItem3ActionPerformed(evt);
			}
		});
		jPopupMenu1.add(jMenuItem3);

		jMenuItem4.setText("删除");
		jMenuItem4.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mousePressed(java.awt.event.MouseEvent evt) {
				jMenuItem4MousePressed(evt);
			}
		});
		jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jMenuItem4ActionPerformed(evt);
			}
		});
		jPopupMenu1.add(jMenuItem4);

		jMenuItem5.setText("保存所有");
		jMenuItem5.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mousePressed(java.awt.event.MouseEvent evt) {
				jMenuItem5MousePressed(evt);
			}
		});
		jPopupMenu1.add(jMenuItem5);

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		jTextArea1.setColumns(20);
		jTextArea1.setRows(5);
		jScrollPane1.setViewportView(jTextArea1);

		jTree1.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mousePressed(java.awt.event.MouseEvent evt) {
				jTree1MousePressed(evt);
			}
		});
		jScrollPane2.setViewportView(jTree1);

		jTable1.setModel(new javax.swing.table.DefaultTableModel(
				new Object[][] { { null, null, null, null, null },
						{ null, null, null, null, null },
						{ null, null, null, null, null },
						{ null, null, null, null, null } }, new String[] {
						"名称", "数据类型", "数据结构类型", "描述", "值" }) {
			Class[] types = new Class[] { java.lang.String.class,
					java.lang.Integer.class, java.lang.Integer.class,
					java.lang.String.class, java.lang.String.class };

			public Class getColumnClass(int columnIndex) {
				return types[columnIndex];
			}
		});
		jScrollPane3.setViewportView(jTable1);

		jMenu1.setText("File");

		jMenuItem1.setText("jMenuItem1");
		jMenu1.add(jMenuItem1);

		jMenuBar1.add(jMenu1);

		jMenu2.setText("Edit");
		jMenuBar1.add(jMenu2);

		setJMenuBar(jMenuBar1);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(
														javax.swing.GroupLayout.Alignment.TRAILING,
														layout.createSequentialGroup()
																.addComponent(
																		jScrollPane2,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		269,
																		Short.MAX_VALUE)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																.addComponent(
																		jScrollPane3,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		540,
																		javax.swing.GroupLayout.PREFERRED_SIZE))
												.addComponent(jScrollPane1))
								.addContainerGap()));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addComponent(jScrollPane1,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										106,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(jScrollPane2)
												.addComponent(
														jScrollPane3,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														584, Short.MAX_VALUE))));

		pack();
	}// </editor-fold>

	private void jTree1MousePressed(java.awt.event.MouseEvent evt) {
		// TODO add your handling code here:
		if (evt.isMetaDown()) {
			TreePath path = jTree1.getPathForLocation(evt.getX(), evt.getY()); // 关键是这个方法的使用
			if (path == null) { // JTree上没有任何项被选中
				return;
			}
			jTree1.setSelectionPath(path);
			jPopupMenu1.show(jTree1, evt.getX(), evt.getY());
		}
	}

	private void jMenuItem2MouseClicked(java.awt.event.MouseEvent evt) {
		DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree1
				.getLastSelectedPathComponent(); // 获得右键选中的节点
		if (evt.getSource() == jMenuItem2) {
			DataType dataType = new DataType();
			dataType.setName("test");
			((DefaultTreeModel) jTree1.getModel()).insertNodeInto(
					new DefaultMutableTreeNode(dataType), node,
					node.getChildCount());
			jTree1.expandPath(jTree1.getSelectionPath());
			System.out.println("123");
		} else if (evt.getSource() == jMenuItem3) {
			if (node.isRoot()) {
				return;
			}			
		}
		jTree1.repaint();
	}

	private void jMenuItem2MouseReleased(java.awt.event.MouseEvent evt) {
		// TODO add your handling code here:
		DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree1
				.getLastSelectedPathComponent(); // 获得右键选中的节点
		if (evt.getSource() == jMenuItem2) {
			DataType dataType = new DataType();
			dataType.setName("test");
			((DefaultTreeModel) jTree1.getModel()).insertNodeInto(
					new DefaultMutableTreeNode(dataType), node,
					node.getChildCount());
			jTree1.expandPath(jTree1.getSelectionPath());
		}
		jTree1.repaint();
	}

	private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void jMenuItem4MousePressed(java.awt.event.MouseEvent evt) {
		DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree1
				.getLastSelectedPathComponent(); // 获得右键选中的节点
		if (evt.getSource() == jMenuItem4) {
			if (node.isRoot()) {
				return;
			}
		}
		DefaultMutableTreeNode parent = (DefaultMutableTreeNode)node.getParent();
		DataType parentData = (DataType)parent.getUserObject();
		DataType nodeData = (DataType)node.getUserObject();
		parentData.getDatas().remove(nodeData);
		((DefaultTreeModel) jTree1.getModel()).removeNodeFromParent(node);
		jTree1.repaint();
	}

	private void jMenuItem5MousePressed(java.awt.event.MouseEvent evt) {
		visitAllNodes(jTree1);
		DefaultMutableTreeNode root = (DefaultMutableTreeNode) jTree1.getModel().getRoot();
		DataType d = (DataType)root.getUserObject();
		JsonPraser.parseJson("E:/", "mapData.config",d);
	}

	private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void jMenuItem3MousePressed(java.awt.event.MouseEvent evt) {
		DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree1
				.getLastSelectedPathComponent(); // 获得右键选中的节点
		DataType d = Util.jsonToObject("{'comm':'','datas':[{'comm':'','datas':[],'name':'test','structType':0,'type':0}],'name':'root','structType':0,'type':0}");
		buildTreeByData(d);
		System.out.println("-----------------------");
		System.out.println("111111111");
		if (evt.getSource() == jMenuItem3) {
			if (node.isRoot()) {
				return;
			}
		}
		jTree1.startEditingAtPath(jTree1.getSelectionPath());
		jTree1.repaint();
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed"
		// desc=" Look and feel setting code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
					.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(JsonEditerUI.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(JsonEditerUI.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(JsonEditerUI.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(JsonEditerUI.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new JsonEditerUI().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify
	private javax.swing.JMenu jMenu1;
	private javax.swing.JMenu jMenu2;
	private javax.swing.JMenuBar jMenuBar1;
	private javax.swing.JMenuItem jMenuItem1;
	private javax.swing.JMenuItem jMenuItem2;
	private javax.swing.JMenuItem jMenuItem3;
	private javax.swing.JMenuItem jMenuItem4;
	private javax.swing.JMenuItem jMenuItem5;
	private javax.swing.JPopupMenu jPopupMenu1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JScrollPane jScrollPane3;
	private javax.swing.JTable jTable1;
	private javax.swing.JTextArea jTextArea1;
	private javax.swing.JTree jTree1;
	// End of variables declaration
}
